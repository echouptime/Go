package main

import (
	"bufio"
	"fmt"
	"io"
	"net"
	"os"
	"strconv"
	"strings"
)

var  (
	Addr string = "127.0.0.1:8000"
	Protocol string = "tcp"
)

func write(conn net.Conn ,txt string) error  {
	length := len(txt)
	_ ,err := conn.Write([]byte(fmt.Sprintf("%05d",length)))
	if err != nil {
		return  err
	}
	_ ,err = conn.Write([]byte(txt))
	if err != nil {
		return  err
	}
	return nil
}

func read(conn net.Conn) (string,error)  {
	lengthBytes := make([]byte,5)
	_,err := conn.Read(lengthBytes)
	if err != nil {
		fmt.Println(err)
		return "", err
	}
	length ,err := strconv.Atoi(string(lengthBytes))
	ctx := make([]byte,length)
	_ , err = conn.Read(ctx)
	if err != nil {
		fmt.Println("Read Server data fail")
		return "",err
	}
	return string(ctx),nil
}

func Input(prompt string)  string {
	fmt.Print(prompt)
	scanner := bufio.NewScanner(os.Stdin)
	scanner.Scan()
	return strings.TrimSpace(scanner.Text())
}


func Server()  {

	//启动监听
	listener ,err := net.Listen(Protocol,Addr)
	if err != nil {
		fmt.Println("String server fail")
	}
	//接受客户端请求
	for {
		conn ,err := listener.Accept()
		if err != nil {
			fmt.Println("Get server data fail")
		} else {

			for {
				//服务器先读客户端数据
				readInfo,err := read(conn)
				if err != nil {
					if err != io.EOF {
						fmt.Println(err)
					}
					break

				}
				fmt.Printf("客户端发送数据: [%s] \n",readInfo,)
				fmt.Printf("服务器端请求日志:  RemoteAddr: [%s] LocalAddr: [%s]\n ",conn.RemoteAddr(),conn.LocalAddr())

				txt := Input("请输入发送信息: ")
				if txt == "exit" {
					break
				}
				//服务器端给客户端回应
				err = write(conn, txt)
				if err != nil {
					if err != io.EOF {
						fmt.Println(err)
					}
					break

				}
				//conn.Write()
				//fmt.Printf("RemoteAddr: [%s] \n",conn.RemoteAddr())
				//fmt.Printf("LocalAddr: [%s]\n",conn.LocalAddr())
			}

		}
		//关闭客户端连接
		defer listener.Close()
	}

}



func main()  {

	Server()

}
